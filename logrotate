#!/usr/bin/env perl

$| = 1; # disable stdout buffering

use strict;
use warnings;
use v5.10;
use File::Basename;
use subs qw(dd getTimestamp getArchiveName);

use constant DEFAULT_MAX_BYTES => 10000;
use constant TAR_CMD           => 'tar';
use constant TAR_OPTS_1        => '-czf';
use constant TAR_OPTS_2        => '-C';
use constant ZIP_EXT           => '.tar.gz';
use constant ARCHIVE_SEPARATOR => '_';

main(@ARGV);

sub main
{
	unless(@ARGV >= 1)
	{
		say "Usage: " . (substr $0,(index $0,'/') + 1) . ' <logFile> <maxFileSizeBytes>';
		exit 0;
	}

	my ($logFile,$oldMaxBytes)                 = @_;
	my ($logFileBase,$logFilePath,$logFileExt) = fileparse $logFile,qr/\.[^.]*/;
	my $logFileName                            = $logFileBase . $logFileExt;
	my $maxBytes                               = (defined $oldMaxBytes && $oldMaxBytes > DEFAULT_MAX_BYTES) ? $oldMaxBytes : DEFAULT_MAX_BYTES;

	while(<STDIN>)
	{
		my $logBytes = -f $logFile ? -s $logFile : 0;
		my $inBytes  = length $_;

		if($inBytes > $maxBytes)
		{
			say "Input length ($inBytes) bytes exceeds $maxBytes bytes";
			exit 1;
		}

		if(-f $logFile and ($logBytes >= $maxBytes or $logBytes + $inBytes > $maxBytes))
		{
			system TAR_CMD,TAR_OPTS_1,getArchiveName($logFile),TAR_OPTS_2,$logFilePath,$logFileName;
			if($? == 0)
			{
				unlink $logFile;
			}else
			{
				say "Error archiving $logFile: $!";
				exit 1;
			}
		}

		open LOG,'>>',$logFile;
		print LOG;
		close LOG;
	}
}

sub dd # convert single-digit numbers to double-digit strings
{
	my $n = shift || 0;

	return $n <= 9 ? '0' . $n : $n;
}

sub getTimestamp # get timestamp string formatted as yymmddhhmmss
{
	my ($sec,$min,$hour,$day,$month,$year) = localtime (shift || time);

	return
		(substr '' . ($year + 1900),-2)
		. (dd $month + 1)
		. (dd $day)
		. (dd $hour)
		. (dd $min)
		. (dd $sec);
}

sub getArchiveName # return string with timestamp and zip extension appended
{
	return unless @_;

	my ($filename,$separator) = @_;
	my ($base,$path,$ext)     = fileparse $filename,qr/\.[^.]*/;
	my $t                     = getTimestamp;
	my $sep                   = $separator || ARCHIVE_SEPARATOR;

	return "${path}${base}${sep}${t}${ext}" . ZIP_EXT;
}